// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    [JsonConverter(typeof(AssetAbilityOptionFieldJsonConverter))]
    public abstract class AssetAbilityOptionField
    {
    }

    public class AssetAbilityOptionFieldJsonConverter : JsonConverter<AssetAbilityOptionField>
    {
        public override AssetAbilityOptionField Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("field_type").GetString();

            switch (tagValue)
            {
                case "select_asset_extension":
                    return JsonSerializer.Deserialize<AssetAbilityOptionFieldSelectAssetExtension>(ref readerCopy, options);
                case "select_number":
                    return JsonSerializer.Deserialize<AssetAbilityOptionFieldSelectNumber>(ref readerCopy, options);
                case "select_stat":
                    return JsonSerializer.Deserialize<AssetAbilityOptionFieldSelectStat>(ref readerCopy, options);
                case "text":
                    return JsonSerializer.Deserialize<AssetAbilityOptionFieldText>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad FieldType value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, AssetAbilityOptionField value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
