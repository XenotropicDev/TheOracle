// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    [JsonConverter(typeof(TriggerRollOptionActionChoiceJsonConverter))]
    public abstract class TriggerRollOptionActionChoice
    {
    }

    public class TriggerRollOptionActionChoiceJsonConverter : JsonConverter<TriggerRollOptionActionChoice>
    {
        public override TriggerRollOptionActionChoice Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("using").GetString();

            switch (tagValue)
            {
                case "attached_asset_ref":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceAttachedAssetRef>(ref readerCopy, options);
                case "custom_value":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceCustomValue>(ref readerCopy, options);
                case "edge":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceEdge>(ref readerCopy, options);
                case "health":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceHealth>(ref readerCopy, options);
                case "heart":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceHeart>(ref readerCopy, options);
                case "iron":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceIron>(ref readerCopy, options);
                case "ref":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceRef>(ref readerCopy, options);
                case "shadow":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceShadow>(ref readerCopy, options);
                case "spirit":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceSpirit>(ref readerCopy, options);
                case "supply":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceSupply>(ref readerCopy, options);
                case "wits":
                    return JsonSerializer.Deserialize<TriggerRollOptionActionChoiceWits>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad Using value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, TriggerRollOptionActionChoice value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
