// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    [JsonConverter(typeof(MoveRerollMethodJsonConverter))]
    public enum MoveRerollMethod
    {
        /// <summary>
        /// Reroll the action die
        /// </summary>
        ActionDie,

        /// <summary>
        /// Reroll all dice
        /// </summary>
        All,

        /// <summary>
        /// Reroll any number of dice
        /// </summary>
        Any,

        /// <summary>
        /// Reroll any number of challenge dice
        /// </summary>
        ChallengeDice,

        /// <summary>
        /// Reroll one of the challenge dice
        /// </summary>
        ChallengeDie,
    }
    public class MoveRerollMethodJsonConverter : JsonConverter<MoveRerollMethod>
    {
        public override MoveRerollMethod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "action_die":
                    return MoveRerollMethod.ActionDie;
                case "all":
                    return MoveRerollMethod.All;
                case "any":
                    return MoveRerollMethod.Any;
                case "challenge_dice":
                    return MoveRerollMethod.ChallengeDice;
                case "challenge_die":
                    return MoveRerollMethod.ChallengeDie;
                default:
                    throw new ArgumentException(String.Format("Bad MoveRerollMethod value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, MoveRerollMethod value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case MoveRerollMethod.ActionDie:
                    JsonSerializer.Serialize<string>(writer, "action_die", options);
                    return;
                case MoveRerollMethod.All:
                    JsonSerializer.Serialize<string>(writer, "all", options);
                    return;
                case MoveRerollMethod.Any:
                    JsonSerializer.Serialize<string>(writer, "any", options);
                    return;
                case MoveRerollMethod.ChallengeDice:
                    JsonSerializer.Serialize<string>(writer, "challenge_dice", options);
                    return;
                case MoveRerollMethod.ChallengeDie:
                    JsonSerializer.Serialize<string>(writer, "challenge_die", options);
                    return;
            }
        }
    }
}
