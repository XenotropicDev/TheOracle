// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    /// <summary>
    /// A standard player stat, or a condition meter that can be used as a stat
    /// in an action roll.
    /// </summary>
    [JsonConverter(typeof(PlayerAttributeRollableJsonConverter))]
    public enum PlayerAttributeRollable
    {
        Edge,

        Health,

        Heart,

        Iron,

        Shadow,

        Spirit,

        Supply,

        Wits,
    }
    public class PlayerAttributeRollableJsonConverter : JsonConverter<PlayerAttributeRollable>
    {
        public override PlayerAttributeRollable Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "edge":
                    return PlayerAttributeRollable.Edge;
                case "health":
                    return PlayerAttributeRollable.Health;
                case "heart":
                    return PlayerAttributeRollable.Heart;
                case "iron":
                    return PlayerAttributeRollable.Iron;
                case "shadow":
                    return PlayerAttributeRollable.Shadow;
                case "spirit":
                    return PlayerAttributeRollable.Spirit;
                case "supply":
                    return PlayerAttributeRollable.Supply;
                case "wits":
                    return PlayerAttributeRollable.Wits;
                default:
                    throw new ArgumentException(String.Format("Bad PlayerAttributeRollable value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, PlayerAttributeRollable value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case PlayerAttributeRollable.Edge:
                    JsonSerializer.Serialize<string>(writer, "edge", options);
                    return;
                case PlayerAttributeRollable.Health:
                    JsonSerializer.Serialize<string>(writer, "health", options);
                    return;
                case PlayerAttributeRollable.Heart:
                    JsonSerializer.Serialize<string>(writer, "heart", options);
                    return;
                case PlayerAttributeRollable.Iron:
                    JsonSerializer.Serialize<string>(writer, "iron", options);
                    return;
                case PlayerAttributeRollable.Shadow:
                    JsonSerializer.Serialize<string>(writer, "shadow", options);
                    return;
                case PlayerAttributeRollable.Spirit:
                    JsonSerializer.Serialize<string>(writer, "spirit", options);
                    return;
                case PlayerAttributeRollable.Supply:
                    JsonSerializer.Serialize<string>(writer, "supply", options);
                    return;
                case PlayerAttributeRollable.Wits:
                    JsonSerializer.Serialize<string>(writer, "wits", options);
                    return;
            }
        }
    }
}
