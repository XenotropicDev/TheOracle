// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    [JsonConverter(typeof(RollMethodJsonConverter))]
    public enum RollMethod
    {
        /// <summary>
        /// When rolling with this move trigger option, *every* stat or progress
        /// track of the `using` key is rolled
        /// </summary>
        All,

        /// <summary>
        /// When rolling with this move trigger option, the player picks which
        /// stat to use.
        /// </summary>
        Any,

        /// <summary>
        /// When rolling with this move trigger option, use the highest/best
        /// option from the `using` key.
        /// </summary>
        Highest,

        /// <summary>
        /// When rolling with this move trigger option, use the lowest/worst
        /// option from the `using` key.
        /// </summary>
        Lowest,

        /// <summary>
        /// Take an automatic miss instead of rolling.
        /// </summary>
        Miss,

        /// <summary>
        /// Take an automatic strong hit instead of rolling.
        /// </summary>
        StrongHit,

        /// <summary>
        /// Take an automatic weak hit instead of rolling.
        /// </summary>
        WeakHit,
    }
    public class RollMethodJsonConverter : JsonConverter<RollMethod>
    {
        public override RollMethod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "all":
                    return RollMethod.All;
                case "any":
                    return RollMethod.Any;
                case "highest":
                    return RollMethod.Highest;
                case "lowest":
                    return RollMethod.Lowest;
                case "miss":
                    return RollMethod.Miss;
                case "strong_hit":
                    return RollMethod.StrongHit;
                case "weak_hit":
                    return RollMethod.WeakHit;
                default:
                    throw new ArgumentException(String.Format("Bad RollMethod value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, RollMethod value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case RollMethod.All:
                    JsonSerializer.Serialize<string>(writer, "all", options);
                    return;
                case RollMethod.Any:
                    JsonSerializer.Serialize<string>(writer, "any", options);
                    return;
                case RollMethod.Highest:
                    JsonSerializer.Serialize<string>(writer, "highest", options);
                    return;
                case RollMethod.Lowest:
                    JsonSerializer.Serialize<string>(writer, "lowest", options);
                    return;
                case RollMethod.Miss:
                    JsonSerializer.Serialize<string>(writer, "miss", options);
                    return;
                case RollMethod.StrongHit:
                    JsonSerializer.Serialize<string>(writer, "strong_hit", options);
                    return;
                case RollMethod.WeakHit:
                    JsonSerializer.Serialize<string>(writer, "weak_hit", options);
                    return;
            }
        }
    }
}
