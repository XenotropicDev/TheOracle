// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Dataforged
{
    [JsonConverter(typeof(TriggerOptionChoiceActionJsonConverter))]
    public abstract class TriggerOptionChoiceAction
    {
    }

    public class TriggerOptionChoiceActionJsonConverter : JsonConverter<TriggerOptionChoiceAction>
    {
        public override TriggerOptionChoiceAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("using").GetString();

            switch (tagValue)
            {
                case "custom":
                    return JsonSerializer.Deserialize<TriggerOptionChoiceActionCustom>(ref readerCopy, options);
                case "stat":
                    return JsonSerializer.Deserialize<TriggerOptionChoiceActionStat>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad Using value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, TriggerOptionChoiceAction value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
